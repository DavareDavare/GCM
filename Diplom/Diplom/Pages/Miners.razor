@page "/miners"
@inject ThemeStateService themeStateService;

<div class="container">
    <h1>Miners</h1>
    <div class="grid">
        <div class="left">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }
            else
            {
            @foreach (Miner miner in miners)
            {
                <MudCard class="custom-dark-card">
                    <MudCardHeader class="custom-dark-card-header">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" class="custom-dark-card-text">Group: @miner.Group </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent class="custom-dark-card-body">
                        <MudText class="custom-dark-card-text">IP Address: @miner.Ip</MudText>
                        <MudText class="custom-dark-card-text">Username: @miner.AdminName</MudText>
                        <MudText class="custom-dark-card-text">Password: @miner.AdminPassword</MudText>
                        <MudText class="custom-dark-card-text">Current Hashrate: @miner.Hashrate</MudText>
                        <MudText Style="visibility:hidden">@miner.Id</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <div class="actions">
                            <div class="checkbox">
                                        <input type="checkbox" class="custom-control-input" id="@($"checkbox{miner.Id}")" @bind="miner.IsChecked" />
                            </div>
                            <div class="buttons">
                                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="(async () => await RestartMiner(miner))">Restart</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="(async () => await TurnOffMiner(miner))">Turn Off</MudButton>
                            </div>
                        </div>
                    </MudCardActions>
                </MudCard>
            }
            }
        </div>
        <div class="right">
            <div class="button-container">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" @onclick="AddMiner">Add New</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Large" @onclick="DeleteMiners">Delete</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Large" @onclick="EditHashrate">Edit Miner</MudButton>
            </div>
        </div>
    </div>
</div>

@if (showAddMinerDialog)
{
        <div class="modal-container">
            <div class="modal">
                <div class="modal-header">
                    <h3>Add New Miner</h3>
                    <button class="close-button" @onclick="CancelAddMiner">X</button>
                </div>
                <div class="modal-body">
                    <div class="input">
                        <p>Miner IP:</p>
                        <MudTextField @bind-Value="newMinerIp" />
                    </div>
                    <div class="input">
                        <p>Miner Group:</p>
                        <MudTextField @bind-Value="newMinerGroup" />
                    </div>
                    <div class="input">
                        <p>Admin User:</p>
                        <MudTextField @bind-Value="newMinerUsername" />
                    </div>
                    <div class="input">
                        <p>Admin Password:</p>
                        <MudTextField @bind-Value="newMinerPassword" />
                    </div>

                </div>
                <div class="modal-footer">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveMiner">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelAddMiner">Cancel</MudButton>
                </div>
            </div>
        </div>
}

@if (showEditHashrateDialog)
{
    var selectedMiners = miners.Where(m => m.IsChecked).ToList();
    if (selectedMiners.Count == 0)
    {
        <div class="modal-container">
            <div class="modal">
                <div class="modal-header">
                    <h3>Edit Hashrate</h3>
                    <button class="close-button" @onclick="CancelEditHashrate">X</button>
                </div>
                <div class="modal-body">
                    <p>No Miners selected...</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal-container">
            <div class="modal">
                <div class="modal-header">
                    <h3>Edit Hashrate</h3>
                    <button class="close-button" @onclick="CancelEditHashrate">X</button>
                </div>
                <div class="modal-body">
                    <div class="input">
                        <p>New Hashrate:</p>
                        <MudNumericField @bind-Value="newHashrate" />
                    </div>
                </div>
                <div class="modal-footer">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SaveHashrate">Save</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelEditHashrate">Cancel</MudButton>
                </div>
            </div>
        </div>
    }
}

@{
    bool useDarkTheme = themeStateService.UseDarkTheme;
    string themeBackgroundColor = useDarkTheme ? "#141218" : "#dbd4c6";
    string themeCardColor = useDarkTheme ? "#2B2930" : "#F3EEEA";
    string themeTextColor = useDarkTheme ? "#FFFFF0" : "#776B5D";
}

@code
{
    private static readonly HttpClient client = new HttpClient();

    List<Miner> miners = new List<Miner>();

    private bool showEditHashrateDialog = false;
    private bool showAddMinerDialog = false;
    private string newMinerIp = "";
    private string newMinerGroup = "";
    private string newMinerUsername = "";
    private string newMinerPassword = "";
    private float newHashrate = 0;
    private string errorMessage = null;

    protected override void OnInitialized()
    {
        LoadMinersWithDelay();
    }

    private async Task LoadMinersWithDelay()
    {
        miners.Clear();

        try
        {
            // Call the API to get miners data
            var responseString = await client.GetStringAsync("https://localhost:7294/api/Miner/GetMiner");
            List<Miner> minersfromdb = JsonConvert.DeserializeObject<List<Miner>>(responseString);
            miners = minersfromdb;
        }
        catch (HttpRequestException ex)
        {
            // Handle the exception by displaying an error message
            errorMessage = $"Error loading miners: {ex.Message}";
        }

        // Introduce a delay of 1 second (1000 milliseconds)
        await Task.Delay(100);

        // Trigger re-render
        StateHasChanged();
    }

    private void AddMiner()
    {
        showAddMinerDialog = true;
    }

    private async void SaveMiner()
    {
        Miner miner = new Miner(newMinerIp, newMinerGroup, miners.Count + 1, newMinerUsername, newMinerPassword);
        string jsonMiner = JsonConvert.SerializeObject(miner);

        HttpResponseMessage response = await client.PostAsync("https://localhost:7294/api/miner/AddMiner", new StringContent(jsonMiner, Encoding.UTF8, "application/json"));

        // Close the dialog
        showAddMinerDialog = false;
        LoadMinersWithDelay();
    }

    private void CancelAddMiner()
    {
        // Close the dialog without saving
        showAddMinerDialog = false;
    }

    private void EditHashrate()
    {
        showEditHashrateDialog = true;
    }

    private async void SaveHashrate()
    {
        try
        {
            var hashrate = newHashrate;
            var selectedMiners = miners.Where(m => m.IsChecked).ToList();

            // Create an anonymous object to represent the structure
            var payload = new
            {
                Hashrate = hashrate,
                ids = selectedMiners.Select(miner => miner.Id).ToList()
            };

            // Serialize the object to JSON using Newtonsoft.Json
            string jsonstring = JsonConvert.SerializeObject(payload);

            Console.WriteLine(jsonstring);

            var response = await client.PutAsync("https://localhost:7294/api/Miner/UpdateHashrate", new StringContent(jsonstring, Encoding.UTF8, "application/json"));
            showEditHashrateDialog = false;

            newMinerIp = "";
            newMinerGroup = "";
            newMinerUsername = "";
            newMinerPassword = "";

            // Reload miners after updating hashrate
            await LoadMinersWithDelay();
        }
        catch (HttpRequestException ex)
        {
            // Handle the exception by displaying an error message
            errorMessage = $"Error saving hashrate: {ex.Message}";
        }

        // Trigger re-render
        StateHasChanged();
    }


    private void CancelEditHashrate()
    {
        showEditHashrateDialog = false;
    }


    private async void DeleteMiners()
    {
        var selectedMiners = miners.Where(m => m.IsChecked).ToList();

        string ids = "[";
        foreach (var miner in selectedMiners)
        {
            ids += miner.Id.ToString() + ",";
        }
        ids = ids.Remove(ids.Length - 1);
        ids += "]";

        HttpRequestMessage request = new HttpRequestMessage
            {
                Content = new StringContent(ids, Encoding.UTF8, "application/json"),
                Method = HttpMethod.Delete,
                RequestUri = new Uri("https://localhost:7294/api/Miner/DeleteMiners")
            };
        await client.SendAsync(request);

        LoadMinersWithDelay();
    }

    private async Task TurnOffMiner(Miner m)
    {
        try
        {
            var content = new StringContent($"{{\"ip\": \"{m.Ip}\"}}", Encoding.UTF8, "application/json");
            if(m.Group == "Antminer")
            {
                var response = await client.PostAsync("http://localhost:8000/stopantminer", content);
                Console.WriteLine("STOP ANT");
                Console.WriteLine(response);
            }
            else if (m.Group == "Whatsminer")
            {
                var response = await client.PostAsync("http://localhost:8000/stopwhatsminer", content);
                Console.WriteLine("STOP WHATS");
                Console.WriteLine(response);
            }
            else
            {
                Console.WriteLine("Couldnt find Minergroup...");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error shutting down: {ex.Message}";
        }
    }

    private async Task RestartMiner(Miner m)
    {
        try
        {
            var content = new StringContent($"{{\"ip\": \"{m.Ip}\"}}", Encoding.UTF8, "application/json");
            if (m.Group == "Antminer")
            {
                var response = await client.PostAsync("http://localhost:8000/restartantminer", content);
                Console.WriteLine("RESTART ANT");
                Console.WriteLine(response);
            }
            else if (m.Group == "Whatsminer")
            {
                var response = await client.PostAsync("http://localhost:8000/restartwhatsminer", content);
                Console.WriteLine("RESTART WHATS");
                Console.WriteLine(response);
            }
            else
            {
                Console.WriteLine("Couldnt find Minergroup...");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error restarting: {ex.Message}";
        }
    }


}


<style>

    <!-- Cards für Miner-->
        .custom-dark-card {
            width: 75%;
            background-color: @themeCardColor;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 30px;
            @{
                if (useDarkTheme == true)
                {
                    <text>border: solid 2px #EADDFF</text>
                }
                else
                {
                    <text>-webkit-box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.5);
                        box-shadow: 0px 3px 5px 0px rgba(0,0,0,0.5);
                    </text>
                }
            }
        }

        .custom-dark-card-header {
            background-color: @themeCardColor;
            color:  @themeTextColor;
            padding: 8px;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

        .custom-dark-card-body {
            padding: 10px;
        }

        .custom-dark-card-text {
            color: @themeTextColor;
        }


    html, body {
        height: 100%;
        background-color: @themeBackgroundColor;
    }

    <!-- Css Grid für Aufteilung Links Miner und Rechts Buttons-->
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Two columns with equal width */
            gap: 150px;
            min-height: 75vh; /* Set min-height to 100% of viewport height */
        }

        .left {
            overflow-y: auto; /* Enable vertical scrolling for the left column */
            max-height: 75vh; /* Set a maximum height for the left column */
        }

        .right {
            display: flex;
            flex-direction: column; /* Ensure buttons stack vertically */
            align-items: flex-end;
            justify-content: flex-end;
        }

        .container {
            margin-top: -140px;
        }

    h1 {
        margin-bottom: 100px;
        color: @themeTextColor;
    }

    .ipcard {
        margin-bottom: 50px;
    }

    .modal-container {
        display: flex;
        align-items: center;
        justify-content: center;
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        z-index: 1000; /* Ensure the modal is on top */
    }

    .modal {
        background: @themeCardColor;
        color: @themeTextColor;
        padding: 20px;
        border-radius: 8px;
        width: 800px; /* Adjust the width as needed */
        height: 600px;
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Align content with space between */
        border: solid 2px @themeTextColor;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        align-items: flex-end; /* Align items to the flex-end (bottom) */
        margin-top: auto; /* Push the footer to the bottom */
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .close-button {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        color: @themeTextColor;
    }

    .modal-body {
        margin-bottom: 20px;
        color: @themeTextColor;
    }

    .mud-input{
        color: @themeTextColor;
    }

    .input{
        margin: 25px;
    }

    .actions
    {
        display: grid;
        grid-template-columns: 0.2fr 0.8fr;
        grid-template-rows: 1fr;
        grid-column-gap: 150px;
    }

    .buttons
    {
        grid-area: 1 / 2 / 2 / 3;
        display: flex;
    }

    .checkbox
    {
        grid-area: 1 / 1 / 2 / 2;
        display: flex;
        justify-content: center;
        margin-left: 25px;
    }
</style>
