@inherits LayoutComponentBase
@inject ThemeStateService themeStateService;
@inject ColorService ColorService
@using Newtonsoft.Json

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudDrawer id="navbar" @bind-Open="_drawerOpen" Elevation="1" Width="500px" style=" align-items: center; justify-content: center;">
        <MudDrawerHeader style="align-items: center; justify-content: center;">
            <MudText Style="font-size: 400%; color: #fffff0" Typo="Typo.h6">GCM</MudText>
        </MudDrawerHeader>
        <div class="nav">
            <NavMenu></NavMenu>
        </div>

        <div class="section">
            <div class="usersettings">
                <MudNavLink id="navbarlink" Href="usersettings" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-gear"></i>
                </MudNavLink>
            </div>
            <div class="dots">
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        </div>
    </MudDrawer>
    <MudMainContent id="main">
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    // benötigt um Navbar offen zu haben
    bool _drawerOpen = true;
    string dotColor1 = "#B72626";
    string dotColor2 = "#A72525";

    protected override async Task OnInitializedAsync()
    {
        //Prüft ob neue User Settings benötigt werden
        await checkSettings();

        //Holt sich die Variablen aus DB in den Service
        await themeStateService.Initialize();
        await ColorService.initialColorAsync();

        //Holt Farbe aus Service
        dotColor1 = await ColorService.getColorAsync();
        //Berechnet zweite Farbe
        SubtractRGB(dotColor1);

        //Abonniert Event
        ColorService.ColorChanged += UpdateDotColor;

        await base.OnInitializedAsync();
        await Task.Delay(100);
        StateHasChanged();
    }


    public async Task checkSettings()
    {
        HttpClient client = new();
        var responseString = await client.GetStringAsync("https://localhost:7294/api/User/GetSettings");
        List<Usersettings> usersettings = JsonConvert.DeserializeObject<List<Usersettings>>(responseString);
        Console.WriteLine("Anzahl Usersettings:" + usersettings.Count);
        if (usersettings.Count == 0)
        {
            await client.PostAsync("https://localhost:7294/api/User/CreateInitial", null);
        }
        else
        {
            Console.WriteLine("Usersettings gefunden.");
        }
    }



    private void UpdateDotColor(string color)
    {
        dotColor1 = color;
        SubtractRGB(color);
        StateHasChanged(); // Notify Blazor to re-render the component
    }

    void SubtractRGB(string hexColor)
    {
        try
        {
            var color = System.Drawing.ColorTranslator.FromHtml(hexColor);

            // Subtract RGB components
            int newRed = Math.Max(0, color.R - 25);
            int newGreen = Math.Max(0, color.G - 25);
            int newBlue = Math.Max(0, color.B - 25);

            // Convert back to hex string
            string modifiedHex = $"#{newRed:X2}{newGreen:X2}{newBlue:X2}";

            dotColor2 = modifiedHex;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error reading file: " + ex.Message);
        }
    }

}


@{
    bool useDarkTheme = themeStateService.UseDarkTheme;
    string themeBackgroundColor = useDarkTheme ? "#211f26" : "#dbd4c6";
    string themeTextColor = useDarkTheme ? "#FFFFF0" : "#776B5D";
}

<style>
    .mud-drawer {
        /*Hintergrund Farbe für Navbar*/
        background-color: @themeBackgroundColor;
        overflow: hidden;
    @{
        if (useDarkTheme == false)
        {
            <text>-webkit-box-shadow: 1px 0px 5px 0px rgba(0,0,0,0.5);
                box-shadow: 1px 0px 5px 0px rgba(0,0,0,0.5);
            </text>
        }
    }
    }

    /*User Settings Rad*/
    .usersettings {
        z-index: 2;
    }

    .fa-gear {
        color: #FFFFF0;
        font-size: 3em;
        margin-bottom: 10px;
    }

    #navbarlink {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /*Bereich unter Nav Items*/
    .section {
        display: flex;
        align-items: flex-end;
        flex: 1;
        overflow: hidden;
        position: relative;
        padding-right: 242px;
        padding-left: 242px;
    }

    .dot {
        height: 25px;
        width: 25px;
        border-radius: 50%;
        display: inline-block;
        position: absolute;
    }

        /* Styles for the first dot */
        .dot:nth-child(1) {
            height: 442px;
            width: 442px;
            background-color: @dotColor1;
            bottom: -10%; /* Position in the vertical center of the first section */
            left: -25%; /* Position in the horizontal center of the first section */
        }

        /* Styles for the second dot */
        .dot:nth-child(2) {
            height: 335px;
            width: 335px;
            background-color: @dotColor2;
            bottom: -15%; /* Position in the vertical center of the first section */
            left: 40%; /* Position in the horizontal center of the first section */
            z-index: 1; /* Ensure the second dot is above the first */
        }
</style>