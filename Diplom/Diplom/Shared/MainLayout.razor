@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudDrawer id="navbar" @bind-Open="_drawerOpen" Elevation="1" Width="500px" style=" align-items: center; justify-content: center;">
        <MudDrawerHeader style="align-items: center; justify-content: center;">
            <MudText Style="font-size: 400%; color: #fffff0" Typo="Typo.h6">GCM</MudText>
        </MudDrawerHeader>
        <div class="nav">
            <NavMenu />
        </div>
        
        <div class="section">
            <div class="usersettings">
                <MudNavLink id="navbarlink" Href="usersettings" Match="NavLinkMatch.All">
                    <i class="fa-solid fa-gear"></i>
                </MudNavLink>
            </div>
            <div class="dots">
                <span class="dot">

                </span>
                <span class="dot">

                </span>
            </div>
        </div>
    </MudDrawer >
    <MudMainContent id="main">
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@{
    bool useDarkTheme = true;
    string themeBackgroundColor = useDarkTheme ? "#211f26" : "#dbd4c6";
    string themeTextColor = useDarkTheme ? "#FFFFF0" : "#776B5D";
}

<style>
    .mud-drawer
    {
        /*Hintergrund Farbe für Navbar*/
        background-color: @themeBackgroundColor;
        overflow: hidden;
    @{
        if(useDarkTheme == false)
        {
            <text>-webkit-box-shadow: 1px 0px 5px 0px rgba(0,0,0,0.5);
                box-shadow: 1px 0px 5px 0px rgba(0,0,0,0.5);
            </text>
        }
        }
        
    }

    /*User Settings Rad*/
    .usersettings
    {
        z-index: 2;
    }

    .fa-gear
    {
        color: #FFFFF0;
        font-size: 3em;
        margin-bottom: 10px;
    }

    #navbarlink {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /*Bereich unter Nav Items*/
    .section {
        display: flex;
        align-items: flex-end;
        flex: 1;
        overflow: hidden;
        position: relative;
        padding-right: 242px;
        padding-left: 242px;
    }

    .dot {
        height: 25px;
        width: 25px;
        border-radius: 50%;
        display: inline-block;
        position: absolute;
    }

    /* Styles for the first dot */
    .dot:nth-child(1) {
        height: 442px;
        width: 442px;
        background-color: @dotColor1;
        bottom: -10%; /* Position in the vertical center of the first section */
        left: -25%; /* Position in the horizontal center of the first section */
    }

    /* Styles for the second dot */
    .dot:nth-child(2) {
        height: 335px;
        width: 335px;
        background-color: @dotColor2;
        bottom: -15%; /* Position in the vertical center of the first section */
        left: 40%; /* Position in the horizontal center of the first section */
        z-index: 1; /* Ensure the second dot is above the first */
        }
</style>

@code {
    // benötigt um Navbar offen zu haben
    bool _drawerOpen = true;
    // Example usage:

    string dotColor1 = "#B72626";
    string dotColor2 = "#A72525";

    void SubtractRGB(string hexColor)
    {

        string filePath = "color.txt";

        try
        {
            string content = File.ReadAllText(filePath);

            var color = System.Drawing.ColorTranslator.FromHtml(hexColor);

            // Subtract RGB components
            int newRed = Math.Max(0, color.R - 16);
            int newGreen = Math.Max(0, color.G - 1);
            int newBlue = Math.Max(0, color.B - 1);

            // Convert back to hex string
            string modifiedHex = $"#{newRed:X2}{newGreen:X2}{newBlue:X2}";

            dotColor2 = modifiedHex;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error reading file: " + ex.Message);
        }
    }

}